#!/bin/bash
# Perform SeaFlow realtime analysis

if [[ "$#" -ne 1 ]]; then
  echo "$(basename $0) seaflow-realtime.conf"
  exit 1
fi
CONFFILE=$1
if [[ ! -e "$CONFFILE" ]]; then
  echo "Config file $CONFFILE does not exist"
  exit 1
fi

source "$CONFFILE"

# Try to find seaflowpy executable
if ! "$SEAFLOWPYEXEC" version >/dev/null; then
  echo "Could not find seaflowpy executable at '$SEAFLOWPYEXEC'"
  exit 1
fi

# Try to find popcycle source directory
if [[ ! -d "$POPCYCLESOURCEDIR" ]]; then
  echo "Could not find popcycle source directory at '$POPCYCLESOURCEDIR'"
  exit 1
fi

# Create raw data directory if it doesn't exist
mkdir -p "${RAWDATADIR}" 2>/dev/null
if [[ ! -d "${RAWDATADIR}" ]]; then
  echo "could not create ${RAWDATADIR}"
  exit 1
fi

# Create results directory if it doesn't exist
mkdir -p "${RESULTSDIR}" 2>/dev/null
if [[ ! -d "${RESULTSDIR}" ]]; then
  echo "could not create ${RESULTSDIR}"
  exit 1
fi
mkdir -p "${RESULTSDIR}/sync" 2>/dev/null
if [[ ! -d "${RESULTSDIR}/sync" ]]; then
  echo "could not create ${RESULTSDIR}/sync"
  exit 1
fi

# If the database doesn't exist yet, create it with filter parameters
if [ ! -e "$DBFILE" ]; then
  echo "Loading filter parameters from $FILTERPARAMSFILE for cruise $CRUISE into $DBFILE"
  "$SEAFLOWPYEXEC" db import-filter-params -c "$CRUISE" "$FILTERPARAMSFILE" "$DBFILE"
fi

# Find and import all SFL files in RAWDATADIR
echo "Importing SFL data in $RAWDATADIR"
/usr/bin/find "$RAWDATADIR" -name '*.sfl' -print0 | /usr/bin/xargs -0 -n 1 -I "{}"  bash -c '"$SEAFLOWPYEXEC" db import-sfl -f -c "$CRUISE" -s "$SERIAL" {} "$DBFILE"'

# Filter, gate, produce results files to sync
echo "Filtering and gating. Reading from $RAWDATADIR, writing to $RESULTSDIR"
/usr/local/bin/Rscript "$POPCYCLESOURCEDIR/executable_scripts/cron_job.R"
